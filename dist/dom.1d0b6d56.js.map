{"version":3,"sources":["dom.js"],"names":["window","dom","create","string","container","document","createElement","innerHTML","trim","content","firstChild","after","node","newNode","parentNode","insertBefore","nextSibling","before","append","parent","appendChild","wrap","newParent","remove","removeChild","empty","array","x","push","attr","name","value","arguments","length","setAttribute","getAttribute","text","innerText","textContent","html","style","neme","Object","object","key","class","add","className","classList","has","contains","on","eventName","fn","addEventListener","off","removeEventListener","find","selector","scope","querySelectorAll","children","siblings","Array","from","filter","n","next","nodeType","previous","previousSibling","each","nodeList","i","call","index","list"],"mappings":"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","file":"dom.1d0b6d56.js","sourceRoot":"..\\src","sourcesContent":["window.dom = {\r\n    //创建并插入一个节点,传入节点的字符串：'<div><span><i>直接插入一个节点</i></span></div>'\r\n    create(string) {\r\n        // template 是万能的模板\r\n        const container = document.createElement('template');\r\n        //去掉空格，空格也是一个标签\r\n        container.innerHTML = string.trim();\r\n        return container.content.firstChild\r\n    },\r\n    //新增弟弟，在元素后面插入一个节点，传入元素节点，新建节点：\r\n    after(node, newNode) {\r\n        node.parentNode.insertBefore(newNode, node.nextSibling);\r\n    },\r\n    //新增哥哥，在节点的前面插入一个节点\r\n    before(node, newNode) {\r\n        node.parentNode.insertBefore(newNode, node);\r\n    },\r\n    //新增一个儿子节点\r\n    append(parent, newNode) {\r\n        parent.appendChild(newNode);\r\n    },\r\n    //给节点添加一个爸爸,把newParent包裹着node\r\n    wrap(node, newParent) {\r\n        //先把newParent变成node兄弟\r\n        dom.after(node, newParent);\r\n        //把node变成newParent的儿子\r\n        dom.append(newParent, node);\r\n    },\r\n    //删除元素（包含此元素）\r\n    remove(node) {\r\n        node.parentNode.removeChild(node);\r\n        return node;\r\n    },\r\n    //将所有子元素删（不包含此元素）\r\n    //获取全部子元素 childNodes =node.chilNodes简写成{ childNodes } = node\r\n    empty(node) {\r\n        const array = []\r\n        let x = node.firstChild\r\n        while (x) {\r\n            array.push(dom.remove(node.firstChild))\r\n            x = node.firstChild\r\n        }\r\n        return array\r\n    },\r\n    //改属性\r\n    attr(node, name, value) {//重载\r\n        // arguments获取参数列表，参数为3个，修改参数，为2则是修改\r\n        if (arguments.length === 3) {\r\n            node.setAttribute(name, value)\r\n        } else if (arguments.length === 2) {\r\n            return node.getAttribute(name)\r\n        }\r\n    },\r\n    //修改文本内容，两个参数：修改，一个：返回\r\n    text(node, string) {\r\n        if (arguments === 2) {\r\n            //适配\r\n            if ('innerText' in node) {\r\n                node.innerText = string\r\n            } else {\r\n                node.textContent = string\r\n            }\r\n        } else if (arguments === 2) {\r\n            if ('innerText' in node) {\r\n                return node.innerText = string\r\n            } else {\r\n                return node.textContent = string\r\n            }\r\n        }\r\n    },\r\n    //修改html\r\n    html(node, string) {\r\n        if (arguments === 2) {\r\n            node.innerHTML = string\r\n        } else if (arguments === 2) {\r\n            return node.innerHTML = string\r\n        }\r\n    },\r\n    //修改样式\r\n    style(node, name, value) {\r\n        if (arguments.length === 3) {\r\n            //改变某一个样式 dom.style(div,'color','red')\r\n            node.style[name] = value\r\n        } else if (arguments.length == 2) {\r\n            //若是两个参数：是取值\r\n            if (typeof neme === 'string') {\r\n                return node.style[name]\r\n            } else if (name instanceof Object) {\r\n                // dom.style(test, { border: '1px solid red', color: 'blue' })\r\n                const object = name\r\n                for (let key in object) {\r\n                    //变量使用[]\r\n                    node.style[key] = object[key]\r\n                }\r\n            }\r\n        }\r\n    },\r\n    //添加修改删除类名\r\n    class: {\r\n        add(node, className) {\r\n            node.classList.add(className)\r\n        },\r\n        remove(node, className) {\r\n            node.classList.remove(className)\r\n        },\r\n        has(node, className) {\r\n            return node.classList.contains(className)\r\n        }\r\n    },\r\n    //点击事件\r\n    on(node, eventName, fn) {\r\n        node.addEventListener(eventName, fn)\r\n    },\r\n    //移除点击事件\r\n    off(node, eventName, fn) {\r\n        node.removeEventListener(eventName, fn)\r\n    },\r\n    //查找\r\n    find(selector, scope) {\r\n        //scope 寻找的指定范围,没有scope就全局寻找\r\n        return (scope || document).querySelectorAll(selector)\r\n    },\r\n    //查找父亲\r\n    parent(node) {\r\n        return node.parentNode\r\n    },\r\n    //查找儿子\r\n    children(node) {\r\n        return node.children\r\n    },\r\n    //查找兄弟姐妹,不包括自己，返回的数组是伪数组\r\n    //filter是过滤，只要不等于传入的节点就放入数组里\r\n    siblings(node) {\r\n        return Array.from(node.parentNode.children)\r\n            .filter(n => n !== node)\r\n    },\r\n    //寻找下一个节点x.nodeType如果是3，则此节点是文本节点\r\n    next(node) {\r\n        let x = node.nextSibling\r\n        while (x && x.nodeType === 3) {\r\n            x = x.nextSibling\r\n        }\r\n        return x\r\n    },\r\n    //返回上一个节点\r\n    previous(node) {\r\n        let x = node.previousSibling\r\n        while (x && x.nodeType === 3) {\r\n            x = x.previousSibling\r\n        }\r\n        return x\r\n    },\r\n    //遍历所有节点\r\n    each(nodeList, fn) {\r\n        for (let i = 0; i < nodeList.length; i++) {\r\n            fn.call(null, nodeList[i])\r\n        }\r\n    },\r\n    //查询节点排名第几\r\n    index(node) {\r\n        const list = dom.children(node.parentNode)\r\n        let i\r\n        for (i = 0; i < list.length; i++) {\r\n            if (list[i] === node) {\r\n                break;\r\n            }\r\n        }\r\n        return i\r\n    }\r\n\r\n\r\n};"]}