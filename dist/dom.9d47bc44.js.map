{"version":3,"sources":["dom.js"],"names":["window","dom","create","string","container","document","createElement","innerHTML","trim","content","firstChild","after","node","newNode","parentNode","insertBefore","nextSibling","before","append","parent","appendChild","wrap","newParent","remove","removeChild","empty","x","array","push","attr","name","value","arguments","length","setAttribute","getAttribute","text","innerText","textContent","html","style","neme","Object","object","key","class","add","className","classList","has","contains","on","eventName","fn","addEventListener","off","removeEventListener","find","selector","scope","querySelectorAll","children","siblings","Array","from","filter","n","next","nodeType","previous","previousSibling","each","nodeList","i","call","index","list"],"mappings":"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","file":"dom.9d47bc44.js","sourceRoot":"..\\src","sourcesContent":["window.dom = {\r\n    //创建并插入一个节点,传入节点的字符串：'<div><span><i>直接插入一个节点</i></span></div>'\r\n    create(string) {\r\n        // template 是万能的模板\r\n        const container = document.createElement('template');\r\n        //去掉空格，空格也是一个标签\r\n        container.innerHTML = string.trim();\r\n        return container.content.firstChild\r\n    },\r\n    //新增弟弟，在元素后面插入一个节点，传入元素节点，新建节点：\r\n    after(node, newNode) {\r\n        node.parentNode.insertBefore(newNode, node.nextSibling);\r\n    },\r\n    //新增哥哥，在节点的前面插入一个节点\r\n    before(node, newNode) {\r\n        node.parentNode.insertBefore(newNode, node);\r\n    },\r\n    //新增一个儿子节点\r\n    append(parent, newNode) {\r\n        parent.appendChild(newNode);\r\n    },\r\n    //给节点添加一个爸爸,把newParent包裹着node\r\n    wrap(node, newParent) {\r\n        //先把newParent变成node兄弟\r\n        dom.after(node, newParent);\r\n        //把node变成newParent的儿子\r\n        dom.append(newParent, node);\r\n    },\r\n    //删除元素（包含此元素）\r\n    remove(node) {\r\n        node.parentNode.removeChild(node);\r\n        return node;\r\n    },\r\n    //将所有子元素删（不包含此元素）\r\n    //获取全部子元素 childNodes =node.chilNodes简写成{ childNodes } = node\r\n    empty(node) {\r\n        const array = []\r\n        let x = node.firstChild\r\n        while (x) {\r\n            array.push(dom.remove(node.firstChild))\r\n            x = node.firstChild\r\n        }\r\n        return array\r\n    },\r\n    //改属性\r\n    attr(node, name, value) {//重载\r\n        // arguments获取参数列表，参数为3个，修改参数，为2则是修改\r\n        if (arguments.length === 3) {\r\n            node.setAttribute(name, value)\r\n        } else if (arguments.length === 2) {\r\n            return node.getAttribute(name)\r\n        }\r\n    },\r\n    //修改文本内容，两个参数：修改，一个：返回\r\n    text(node, string) {\r\n        if (arguments === 2) {\r\n            //适配\r\n            if ('innerText' in node) {\r\n                node.innerText = string\r\n            } else {\r\n                node.textContent = string\r\n            }\r\n        } else if (arguments === 2) {\r\n            if ('innerText' in node) {\r\n                return node.innerText = string\r\n            } else {\r\n                return node.textContent = string\r\n            }\r\n        }\r\n    },\r\n    //修改html\r\n    html(node, string) {\r\n        if (arguments === 2) {\r\n            node.innerHTML = string\r\n        } else if (arguments === 2) {\r\n            return node.innerHTML = string\r\n        }\r\n    },\r\n    //修改样式\r\n    style(node, name, value) {\r\n        if (arguments.length === 3) {\r\n            //改变某一个样式 dom.style(div,'color','red')\r\n            node.style[name] = value\r\n        } else if (arguments.length == 2) {\r\n            //若是两个参数：是取值\r\n            if (typeof neme === 'string') {\r\n                return node.style[name]\r\n            } else if (name instanceof Object) {\r\n                // dom.style(test, { border: '1px solid red', color: 'blue' })\r\n                const object = name\r\n                for (let key in object) {\r\n                    //变量使用[]\r\n                    node.style[key] = object[key]\r\n                }\r\n            }\r\n        }\r\n    },\r\n    //添加修改删除类名\r\n    class: {\r\n        add(node, className) {\r\n            node.classList.add(className)\r\n        },\r\n        remove(node, className) {\r\n            node.classList.remove(className)\r\n        },\r\n        has(node, className) {\r\n            return node.classList.contains(className)\r\n        }\r\n    },\r\n    //点击事件\r\n    on(node, eventName, fn) {\r\n        node.addEventListener(eventName, fn)\r\n    },\r\n    //移除点击事件\r\n    off(node, eventName, fn) {\r\n        node.removeEventListener(eventName, fn)\r\n    },\r\n    //查找\r\n    find(selector, scope) {\r\n        //scope 寻找的指定范围,没有scope就全局寻找\r\n        return (scope || document).querySelectorAll(selector)\r\n    },\r\n    //查找父亲\r\n    parent(node) {\r\n        return node.parentNode\r\n    },\r\n    //查找儿子\r\n    children(node) {\r\n        return node.children\r\n    },\r\n    //查找兄弟姐妹,不包括自己，返回的数组是伪数组\r\n    //filter是过滤，只要不等于传入的节点就放入数组里\r\n    siblings(node) {\r\n        return Array.from(node.parentNode.children)\r\n            .filter(n => n !== node)\r\n    },\r\n    //寻找下一个节点x.nodeType如果是3，则此节点是文本节点\r\n    next(node) {\r\n        let x = node.nextSibling\r\n        while (x && x.nodeType === 3) {\r\n            x = x.nextSibling\r\n        }\r\n        return x\r\n    },\r\n    //返回上一个节点\r\n    previous(node) {\r\n        let x = node.previousSibling\r\n        while (x && x.nodeType === 3) {\r\n            x = x.previousSibling\r\n        }\r\n        return x\r\n    },\r\n    //遍历所有节点\r\n    each(nodeList, fn) {\r\n        for (let i = 0; i < nodeList.length; i++) {\r\n            fn.call(null, nodeList[i])\r\n        }\r\n    },\r\n    //查询节点排名第几\r\n    index(node) {\r\n        const list = dom.children(node.parentNode)\r\n        let i\r\n        for (i = 0; i < list.length; i++) {\r\n            if (list[i] === node) {\r\n                break;\r\n            }\r\n        }\r\n        return i\r\n    }\r\n\r\n\r\n};"]}